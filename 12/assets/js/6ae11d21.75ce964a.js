"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[9118],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>h});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||g[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4768:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(8168),a=(n(6540),n(5680));const i={},o="Walkthrough",l={unversionedId:"Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Drills/Tasks/Walkthrough/README",id:"Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Drills/Tasks/Walkthrough/README",title:"Walkthrough",description:"Access the 0-walkthrough directory in the lab archive.",source:"@site/docs/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Drills/Tasks/Walkthrough/README.md",sourceDirName:"Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Drills/Tasks/Walkthrough",slug:"/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Drills/Tasks/Walkthrough/",permalink:"/hardware-software-interface/12/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Drills/Tasks/Walkthrough/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Tasks",permalink:"/hardware-software-interface/12/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Drills/Tasks/"},next:{title:"Conditional jumps",permalink:"/hardware-software-interface/12/Lab 5 - Introduction to Assembly Language/x86 Architecture Family/Drills/Tasks/Conditional Jumps/"}},s={},p=[],c={toc:p},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"walkthrough"},"Walkthrough"),(0,a.yg)("p",null,"Access the ",(0,a.yg)("inlineCode",{parentName:"p"},"0-walkthrough")," directory in the lab archive."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Open the ",(0,a.yg)("inlineCode",{parentName:"p"},"ex1.asm")," file and read the comments. Assemble it by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"make")," utility and run it. Using gdb, go through the program line by line (the ",(0,a.yg)("inlineCode",{parentName:"p"},"start")," command followed by ",(0,a.yg)("inlineCode",{parentName:"p"},"next"),") and observe the changes in register values after executing the ",(0,a.yg)("inlineCode",{parentName:"p"},"MOV")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ADD")," instructions. Ignore the sequence of ",(0,a.yg)("inlineCode",{parentName:"p"},"PRINTF32")," instructions.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Open the ",(0,a.yg)("inlineCode",{parentName:"p"},"ex2.asm")," file and read the comments. Assemble it by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"make")," utility and run it. Using gdb, observe the change in the ",(0,a.yg)("strong",{parentName:"p"},"EIP")," register when executing the ",(0,a.yg)("inlineCode",{parentName:"p"},"JMP")," instruction. To skip the ",(0,a.yg)("inlineCode",{parentName:"p"},"PRINTF32")," instructions, add a breakpoint at the ",(0,a.yg)("inlineCode",{parentName:"p"},"jump_incoming")," label (the ",(0,a.yg)("inlineCode",{parentName:"p"},"break")," command followed by ",(0,a.yg)("inlineCode",{parentName:"p"},"run"),").")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Open the ",(0,a.yg)("inlineCode",{parentName:"p"},"ex3.asm")," file and read the comments. Assemble it by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"make")," utility and run it. Using gdb, navigate through the program using breakpoints. Follow the program flow. Why is ",(0,a.yg)("inlineCode",{parentName:"p"},"15")," displayed first and then ",(0,a.yg)("inlineCode",{parentName:"p"},"3"),"? Because of the jump at line 9. Where does the jump at line 25 point to? To the ",(0,a.yg)("inlineCode",{parentName:"p"},"zone1")," label.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Open the ",(0,a.yg)("inlineCode",{parentName:"p"},"ex4.asm")," file and read the comments. Assemble it by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"make")," utility and run it. Using gdb, go through the program. Why isn't the jump at line 12 taken? Because the ",(0,a.yg)("inlineCode",{parentName:"p"},"JE")," instruction jumps if the ",(0,a.yg)("strong",{parentName:"p"},"ZF")," bit in the ",(0,a.yg)("strong",{parentName:"p"},"FLAGS")," register is set. This bit is set by the ",(0,a.yg)("inlineCode",{parentName:"p"},"CMP")," instruction, which calculates the difference between the values of the ",(0,a.yg)("strong",{parentName:"p"},"EAX")," and ",(0,a.yg)("strong",{parentName:"p"},"EBX")," registers without storing the result. However, the ",(0,a.yg)("inlineCode",{parentName:"p"},"ADD")," instruction at line 11 clears this flag because the result of the operation is different from 0."))))}g.isMDXComponent=!0}}]);