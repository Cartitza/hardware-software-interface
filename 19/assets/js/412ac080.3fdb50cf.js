"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[3332],{5680:(e,r,t)=>{t.d(r,{xA:()=>g,yg:()=>y});var a=t(6540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),d=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},g=function(e){var r=d(e.components);return a.createElement(l.Provider,{value:r},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=d(t),m=n,y=c["".concat(l,".").concat(m)]||c[m]||p[m]||s;return t?a.createElement(y,i(i({ref:r},g),{},{components:t})):a.createElement(y,i({ref:r},g))}));function y(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var s=t.length,i=new Array(s);i[0]=m;var o={};for(var l in r)hasOwnProperty.call(r,l)&&(o[l]=r[l]);o.originalType=e,o[c]="string"==typeof e?e:n,i[1]=o;for(var d=2;d<s;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1641:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=t(8168),n=(t(6540),t(5680));const s={},i="Registers",o={unversionedId:"Lab 6 - Registers and Memory Addressing/Registers/Reading/README",id:"Lab 6 - Registers and Memory Addressing/Registers/Reading/README",title:"Registers",description:'Registers are the primary "tools" used to write programs in assembly language.',source:"@site/docs/Lab 6 - Registers and Memory Addressing/Registers/Reading/README.md",sourceDirName:"Lab 6 - Registers and Memory Addressing/Registers/Reading",slug:"/Lab 6 - Registers and Memory Addressing/Registers/Reading/",permalink:"/hardware-software-interface/19/Lab 6 - Registers and Memory Addressing/Registers/Reading/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Registers",permalink:"/hardware-software-interface/19/Lab 6 - Registers and Memory Addressing/Registers/"},next:{title:"Guides",permalink:"/hardware-software-interface/19/Lab 6 - Registers and Memory Addressing/Registers/Guides/"}},l={},d=[{value:"Register Subsections",id:"register-subsections",level:2},{value:"Static Memory Region Declarations",id:"static-memory-region-declarations",level:2}],g={toc:d},c="wrapper";function p(e){let{components:r,...s}=e;return(0,n.yg)(c,(0,a.A)({},g,s,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"registers"},"Registers"),(0,n.yg)("p",null,'Registers are the primary "tools" used to write programs in assembly language.\nThey are like variables built into the processor.\nUsing registers instead of direct memory addressing makes developing and reading assembly-written programs faster and easier.\nThe only disadvantage of programming in x86 assembly language is that there are few registers.'),(0,n.yg)("p",null,"Modern x86 processors have 8 general-purpose registers whose size is 32 bits.\nThe names of the registers are of historical nature (for example: ",(0,n.yg)("inlineCode",{parentName:"p"},"eax")," was called the accumulator register because it is used by a series of arithmetic instructions, such as ",(0,n.yg)("a",{parentName:"p",href:"https://www.felixcloutier.com/x86/idiv"},"idiv"),').\nWhile most registers have lost their special purpose, becoming "general purpose" in the modern ISA (',(0,n.yg)("inlineCode",{parentName:"p"},"eax"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"ebx"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"ecx"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"edx"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"esi"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"edi"),"), by convention, 2 have retained their initial purpose: ",(0,n.yg)("inlineCode",{parentName:"p"},"esp")," (stack pointer) and ",(0,n.yg)("inlineCode",{parentName:"p"},"ebp")," (base pointer)."),(0,n.yg)("h2",{id:"register-subsections"},"Register Subsections"),(0,n.yg)("p",null,"In certain cases, we want to manipulate values that are represented in less than 4 bytes (for example, working with character strings).\nFor these situations, x86 processors offer us the possibility to work with subsections of 1 and 2 bytes of the ",(0,n.yg)("inlineCode",{parentName:"p"},"eax"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"ebx"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"ecx"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"edx")," registers."),(0,n.yg)("p",null,"The image below represents the registers, their subsections, and their sizes."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"x86_32 Registers",src:t(9032).A})),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("strong",{parentName:"p"},"WARNING"),": Subsections are part of registers, which means that if we modify a register, we implicitly modify the value of the subsection."),(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("strong",{parentName:"p"},"NOTE"),": Subsections are used in the same way as registers, only the size of the retained value is different."),(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("strong",{parentName:"p"},"NOTE"),": Besides the basic registers, there are also six segment registers corresponding to certain areas as seen in the image:"),(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("img",{alt:"Segment Registers",src:t(240).A}))),(0,n.yg)("h2",{id:"static-memory-region-declarations"},"Static Memory Region Declarations"),(0,n.yg)("p",null,"Static memory declarations (analogous to declaring global variables) in the x86 world are made through special assembly directives.\nThese declarations are made in the data section (the ",(0,n.yg)("inlineCode",{parentName:"p"},".data")," region).\nNames can be attached to the declared memory portions through a label to easily reference them later in the program. Follow the example below:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-Assembly"},'.DATA\n    var        `db` 64    ; Declares a byte containing the value 64. Labels\n                        ; the memory location as "var".\n    var2       `db` ?     ; Declares an uninitialized byte labeled "var2".\n               `db` 10    ; Declares an unlabeled byte, initialized with 10. This\n                        ; byte will be placed at the address (var2 + 1).\n    X          `dw` ?     ; Declares an uninitialized word (2 bytes), labeled "X".\n    Y          `dd` 3000  ; Declares a double word (4 bytes) labeled "Y",\n                        ; initialized with the value 3000.\n    Z          `dd` 1,2,3 ; Declares 3 double words (each 4 bytes)\n                        ; starting from address "Z" and initialized with 1, 2, and 3, respectively.\n                        ; For example, 3 will be placed at the address (Z + 8).\n')),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("strong",{parentName:"p"},"NOTE"),": DB, DW, DD are directives used to specify the size of the portion:\nDirective | Role               | Size\n--------- | ------------------ | ----\n",(0,n.yg)("inlineCode",{parentName:"p"},"db"),"        | Define Byte        | 1 bytes (8 bits)\n",(0,n.yg)("inlineCode",{parentName:"p"},"dw"),"        | Define Word        | 2 bytes (16 bits)\n",(0,n.yg)("inlineCode",{parentName:"p"},"dd"),"        | Define Double Word | 4 bytes (32 bits)"),(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("strong",{parentName:"p"},"NOTE"),": There are multiple types of memory regions as can be seen in the image below:"),(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("img",{alt:"Memory Sections",src:t(3769).A,width:"640",height:"480"}))),(0,n.yg)("p",null,"The last declaration in the above example represents the declaration of an array.\nUnlike higher-level languages, where arrays can have multiple dimensions and their elements are accessed by indices, in assembly language, arrays are represented as a number of cells located in a contiguous area of memory."))}p.isMDXComponent=!0},9032:(e,r,t)=>{t.d(r,{A:()=>a});const a=t.p+"assets/images/registers-1ba612268c43a1989835673c3e683b19.svg"},3769:(e,r,t)=>{t.d(r,{A:()=>a});const a=t.p+"assets/images/sections-bd531a20bf90f40ab1dc04a208f1264d.jpg"},240:(e,r,t)=>{t.d(r,{A:()=>a});const a=t.p+"assets/images/segments-841a4aca92b7d3147851a3e99b1ac9d0.svg"}}]);