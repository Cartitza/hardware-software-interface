"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[2008],{5680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>g});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),p=a,g=d["".concat(l,".").concat(p)]||d[p]||y[p]||s;return t?n.createElement(g,i(i({ref:r},u),{},{components:t})):n.createElement(g,i({ref:r},u))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=p;var o={};for(var l in r)hasOwnProperty.call(r,l)&&(o[l]=r[l]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3561:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=t(8168),a=(t(6540),t(5680));const s={},i="Structured Data (Structures, Arrays and String Operations)",o={unversionedId:"Lab 7 - Structures, vectors and strings/Arrays/Reading/README",id:"Lab 7 - Structures, vectors and strings/Arrays/Reading/README",title:"Structured Data (Structures, Arrays and String Operations)",description:"Arrays",source:"@site/docs/Lab 7 - Structures, vectors and strings/Arrays/Reading/README.md",sourceDirName:"Lab 7 - Structures, vectors and strings/Arrays/Reading",slug:"/Lab 7 - Structures, vectors and strings/Arrays/Reading/",permalink:"/hardware-software-interface/20/Lab 7 - Structures, vectors and strings/Arrays/Reading/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Arrays",permalink:"/hardware-software-interface/20/Lab 7 - Structures, vectors and strings/Arrays/"},next:{title:"Guides",permalink:"/hardware-software-interface/20/Lab 7 - Structures, vectors and strings/Arrays/Guides/"}},l={},c=[{value:"Arrays",id:"arrays",level:2},{value:"Declaring an Array",id:"declaring-an-array",level:3},{value:"Arrays of Structures",id:"arrays-of-structures",level:2},{value:"Declaring an Array of Structures",id:"declaring-an-array-of-structures",level:3},{value:"Traversing an Array of Structures",id:"traversing-an-array-of-structures",level:3}],u={toc:c},d="wrapper";function y(e){let{components:r,...t}=e;return(0,a.yg)(d,(0,n.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"structured-data-structures-arrays-and-string-operations"},"Structured Data (Structures, Arrays and String Operations)"),(0,a.yg)("h2",{id:"arrays"},"Arrays"),(0,a.yg)("p",null,"We can consider an array as a sequence of elements of the same type, placed contiguously in memory.\nYou might have noticed something similar in previous labs when declaring static character strings in the ",(0,a.yg)("inlineCode",{parentName:"p"},".data")," section."),(0,a.yg)("h3",{id:"declaring-an-array"},"Declaring an Array"),(0,a.yg)("p",null,"In general, declared static data can be initialized or uninitialized.\nDifferentiation is made both by providing an initial value for initialized data and by the NASM syntax used."),(0,a.yg)("p",null,"For example, to declare an array of 100 words initialized with the value 42, we will use the construction:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"section .data\n    myVect:    times 100    dw 42\n")),(0,a.yg)("p",null,'On the other hand, if we want to declare an uninitialized array of 20 double-word elements, we use instructions from the "res" family as follows:'),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"section .bss\n    myVect:    resd 20\n")),(0,a.yg)("h2",{id:"arrays-of-structures"},"Arrays of Structures"),(0,a.yg)("p",null,"Often, we'll need arrays that contain elements larger than a double word.\nTo achieve this, we'll combine the two concepts presented earlier and use arrays of structures.\nOf course, string operation instructions will not work, so we'll have to resort to the classic method of accessing elements: explicit memory addressing."),(0,a.yg)("p",null,"For the example in this section, we create a structure representing a point in a 2D space."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"struc point\n    .x:    resd 1\n    .y:    resd 1\nendstruc\n")),(0,a.yg)("h3",{id:"declaring-an-array-of-structures"},"Declaring an Array of Structures"),(0,a.yg)("p",null,"Since NASM doesn't support any mechanism to explicitly declare an array of structures, we'll need to effectively declare a data section to accommodate our array."),(0,a.yg)("p",null,"Suppose we want a zero-initialized array of 100 elements of the structure type ",(0,a.yg)("inlineCode",{parentName:"p"},"point")," (which is 8 bytes in size), we need to allocate 100 * 8 (= 800) bytes."),(0,a.yg)("p",null,"We obtain:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"section .data\n    pointArray:    times 800    db 0\n")),(0,a.yg)("p",null,"In addition, NASM provides an alternative to manually calculating the size of a structure by automatically generating the macro ",(0,a.yg)("inlineCode",{parentName:"p"},"<structure name>_size"),".\nThus, the previous example can become:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"section .data\n    pointArray:    times point_size * 100    db 0\n")),(0,a.yg)("p",null,"If we want to declare an uninitialized array of structures, we can use:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"section .bss\n    pointArray:    resb point_size * 100\n")),(0,a.yg)("h3",{id:"traversing-an-array-of-structures"},"Traversing an Array of Structures"),(0,a.yg)("p",null,'As mentioned before, to access a field of an element in an array, we need to use normal addressing (particularly "based-indexed with scale" addressing).\nThe formula to find the address of the element is ',(0,a.yg)("inlineCode",{parentName:"p"},"base_of_array + i * size_of_struct"),"."),(0,a.yg)("p",null,"Assuming we have the start address of the array in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ebx")," register and the index of the element we want to access in the ",(0,a.yg)("inlineCode",{parentName:"p"},"eax")," register, the following example demonstrates printing the value of the y field of this element."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"mov ebx, pointArray                             ; Move the start address of the array into ebx\nmov eax, 13                                     ; Assume we want the 13th element\nmov edx, [ebx + point_size * eax + point.y]     ; Calculate the address of the desired field between []\n                                                ; and then transfer the value from that address\n                                                ; into the edx register\n\nPRINTF32 `%u\\n\\x0`, edx\n")),(0,a.yg)("p",null,"We traverse the array, having the current index in the eax register at each iteration.\nWe can print the values from both fields of each element in the array with the following program:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"struc   point\n    .x: resd 1\n    .y: resd 1\nendstruc\n\nsection .data\n    pointArray: times point_size * 100 db 0\n\nsection .text\n    global CMAIN\n\nCMAIN:\n    push ebp\n    mov ebp, esp\n\n    xor edx, edx\n    xor eax, eax\n\nlabel:\n    mov edx, [pointArray + point_size * eax + point.x] ; acces\u0103m membrul x\n    PRINTF32 `%u\\n\\x0`, edx\n\n    mov edx, [pointArray + point_size * eax + point.y] ; acces\u0103m membrul y\n    PRINTF32 `%u\\n\\x0`, edx\n\n    inc eax ; incrementarea indicelui de iterare\n    cmp eax, 100\n    jl label\n\n    leave\n    ret\n")))}y.isMDXComponent=!0}}]);