"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[5816],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,g=u["".concat(s,".").concat(f)]||u[f]||m[f]||a;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=n(8168),o=(n(6540),n(5680));const a={},i="Implementing the toupper Function",p={unversionedId:"Lab 9 - Functions/Functions/Drills/Tasks/To Upper/README",id:"Lab 9 - Functions/Functions/Drills/Tasks/To Upper/README",title:"Implementing the toupper Function",description:"We aim to implement the toupper function, which converts lowercase letters to uppercase. To do this, start with the toupper.asm file from the lab exercises archive and complete the body of the toupper function.",source:"@site/docs/Lab 9 - Functions/Functions/Drills/Tasks/To Upper/README.md",sourceDirName:"Lab 9 - Functions/Functions/Drills/Tasks/To Upper",slug:"/Lab 9 - Functions/Functions/Drills/Tasks/To Upper/",permalink:"/hardware-software-interface/21/Lab 9 - Functions/Functions/Drills/Tasks/To Upper/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Displaying the Reversed String",permalink:"/hardware-software-interface/21/Lab 9 - Functions/Functions/Drills/Tasks/Printing a String in Reverse/"},next:{title:"Bonus: Rot13",permalink:"/hardware-software-interface/21/Lab 9 - Functions/Functions/Drills/Tasks/Rot13/"}},s={},l=[{value:"Bonus: toupper Only for Lowercase Letters",id:"bonus-toupper-only-for-lowercase-letters",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.yg)(u,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"implementing-the-toupper-function"},"Implementing the toupper Function"),(0,o.yg)("p",null,"We aim to implement the ",(0,o.yg)("inlineCode",{parentName:"p"},"toupper")," function, which converts lowercase letters to uppercase. To do this, start with the ",(0,o.yg)("inlineCode",{parentName:"p"},"toupper.asm")," file from the lab exercises archive and complete the body of the ",(0,o.yg)("inlineCode",{parentName:"p"},"toupper")," function."),(0,o.yg)("p",null,"The string used is ",(0,o.yg)("inlineCode",{parentName:"p"},"mystring"),", and we assume it is a valid string. This string is passed as an argument to the ",(0,o.yg)("inlineCode",{parentName:"p"},"toupper")," function when called."),(0,o.yg)("p",null,"Perform the transformation in place; there is no need for another string."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"NOTE_"),"  To convert a lowercase letter to uppercase, you need to ",(0,o.yg)("strong",{parentName:"p"},"subtract")," ",(0,o.yg)("inlineCode",{parentName:"p"},"0x20")," from its value. This is the difference between lowercase and uppercase letters; for example, ",(0,o.yg)("inlineCode",{parentName:"p"},"a")," is ",(0,o.yg)("inlineCode",{parentName:"p"},"0x61"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"A")," is ",(0,o.yg)("inlineCode",{parentName:"p"},"0x41"),". You can see this in the ",(0,o.yg)("a",{parentName:"p",href:"http://man7.org/linux/man-pages/man7/ascii.7.html"},"ASCII manual page"),"."),(0,o.yg)("p",{parentName:"blockquote"},"To read or write byte by byte, use the ",(0,o.yg)("inlineCode",{parentName:"p"},"byte [reg]")," construction as seen in the implementation of determining the length of a string in the ",(0,o.yg)("inlineCode",{parentName:"p"},"print_string_length.asm")," file, where ",(0,o.yg)("inlineCode",{parentName:"p"},"[reg]")," is the pointer register storing the address of the string at that point."),(0,o.yg)("p",{parentName:"blockquote"},"Stop when you reach the value ",(0,o.yg)("inlineCode",{parentName:"p"},"0")," (",(0,o.yg)("inlineCode",{parentName:"p"},"NULL")," byte). For checking, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"test")," as seen in the implementation of determining the length of a string in the ",(0,o.yg)("inlineCode",{parentName:"p"},"print-string-length.asm")," file.")),(0,o.yg)("h2",{id:"bonus-toupper-only-for-lowercase-letters"},"Bonus: toupper Only for Lowercase Letters"),(0,o.yg)("p",null,"Implement the ",(0,o.yg)("inlineCode",{parentName:"p"},"toupper")," function so that the transformation occurs only for lowercase characters, not uppercase letters or other types of characters."))}m.isMDXComponent=!0}}]);