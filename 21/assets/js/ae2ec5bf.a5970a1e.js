"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[5630],{5680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>d});var t=a(6540);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=t.createContext({}),c=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(a),m=o,d=f["".concat(i,".").concat(m)]||f[m]||u[m]||r;return a?t.createElement(d,s(s({ref:n},p),{},{components:a})):t.createElement(d,s({ref:n},p))}));function d(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[f]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<r;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3934:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=a(8168),o=(a(6540),a(5680));const r={},s="Disassembling a C program",l={unversionedId:"Lab 9 - Functions/Functions/Guides/Disassemblying a C program/README",id:"Lab 9 - Functions/Functions/Guides/Disassemblying a C program/README",title:"Disassembling a C program",description:"As mentioned, ultimately everything ends up in assembly language (to be 100% accurate, everything ends up as machine code, which has a fairly good correspondence with assembly code). Often, we find ourselves with access only to the object code of some programs and we want to inspect how it looks.",source:"@site/docs/Lab 9 - Functions/Functions/Guides/Disassemblying a C program/README.md",sourceDirName:"Lab 9 - Functions/Functions/Guides/Disassemblying a C program",slug:"/Lab 9 - Functions/Functions/Guides/Disassemblying a C program/",permalink:"/hardware-software-interface/21/Lab 9 - Functions/Functions/Guides/Disassemblying a C program/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Hello, world!",permalink:"/hardware-software-interface/21/Lab 9 - Functions/Functions/Guides/Hello World/"},next:{title:"Drills",permalink:"/hardware-software-interface/21/Lab 9 - Functions/Functions/Drills/"}},i={},c=[],p={toc:c},f="wrapper";function u(e){let{components:n,...a}=e;return(0,o.yg)(f,(0,t.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"disassembling-a-c-program"},"Disassembling a C program"),(0,o.yg)("p",null,"As mentioned, ultimately everything ends up in assembly language (to be 100% accurate, everything ends up as machine code, which has a fairly good correspondence with assembly code). Often, we find ourselves with access only to the object code of some programs and we want to inspect how it looks."),(0,o.yg)("p",null,"To observe this, let's compile a C program to its object code and then disassemble it. We'll use the ",(0,o.yg)("inlineCode",{parentName:"p"},"test.c")," program from the lab archive."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"NOTE:")," To compile a C/C++ source file in the command line, follow these steps:")),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Open a terminal. (shortcut ",(0,o.yg)("inlineCode",{parentName:"li"},"Ctrl+Alt+T"),")"),(0,o.yg)("li",{parentName:"ol"},"Navigate to the directory containing your source code."),(0,o.yg)("li",{parentName:"ol"},"Use the command",(0,o.yg)("blockquote",{parentName:"li"},(0,o.yg)("pre",{parentName:"blockquote"},(0,o.yg)("code",{parentName:"pre",className:"language-Bash"},"gcc -m32 -o <exec> <sourcefile>\n")),(0,o.yg)("p",{parentName:"blockquote"},"where ",(0,o.yg)("inlineCode",{parentName:"p"},"<sourcefile>")," is the name of the source file (test.c) and ",(0,o.yg)("inlineCode",{parentName:"p"},"<exec>")," is the name of the result executable."),(0,o.yg)("ol",{parentName:"blockquote"},(0,o.yg)("li",{parentName:"ol"},"If you ",(0,o.yg)("strong",{parentName:"li"},"only")," want to compile (",(0,o.yg)("strong",{parentName:"li"},"without")," linking it), use:")),(0,o.yg)("pre",{parentName:"blockquote"},(0,o.yg)("code",{parentName:"pre",className:"language-Bash"},"gcc -m32 -c -o <objfile> <sourcefile>\nwhere `<sourcefile>` is the name of the source file and `<objfile>` is the name of the desired output object file.\n"))))),(0,o.yg)("p",null,"Since we want to transform ",(0,o.yg)("inlineCode",{parentName:"p"},"test.c")," into an object file, we'll run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-Bash"},"gcc -m32 -c -o test.o test.c\n")),(0,o.yg)("p",null,"After running the above command, we should see a file named ",(0,o.yg)("inlineCode",{parentName:"p"},"test.o"),"."),(0,o.yg)("p",null,"Furthermore, we can use ",(0,o.yg)("inlineCode",{parentName:"p"},"gcc")," to transform the ",(0,o.yg)("inlineCode",{parentName:"p"},"C")," code in ",(0,o.yg)("inlineCode",{parentName:"p"},"Assembly")," code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-Bash"},"gcc -m32 -masm=intel -S -o test.asm test.c\n")),(0,o.yg)("p",null,"After running the above command we'll have a file called ",(0,o.yg)("inlineCode",{parentName:"p"},"test.asm"),", which we can inspect using any text editor/reader, such as cat:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-Bash"},"cat test.asm\n")),(0,o.yg)("p",null,"In order to disassembly the code of an object file we'll use ",(0,o.yg)("inlineCode",{parentName:"p"},"objdump")," as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-Bash"},"objdump -M intel -d <path-to-obj-file>\n")),(0,o.yg)("p",null,"where ",(0,o.yg)("inlineCode",{parentName:"p"},"<path-to-obj-file>")," is the path to the object file ",(0,o.yg)("inlineCode",{parentName:"p"},"test.o"),"."),(0,o.yg)("p",null,"Afterwards, you'll see an output similar to the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-Bash"},"> objdump -M intel -d test.o\n\ntest.o:     file format elf32-i386\n\n\nDisassembly of section .text:\n\n00000000 <second_func>:\n   0:   55                      push   ebp\n   1:   89 e5                   mov    ebp,esp\n   3:   e8 fc ff ff ff          call   4 <second_func+0x4>\n   8:   05 01 00 00 00          add    eax,0x1\n   d:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n  10:   8b 10                   mov    edx,DWORD PTR [eax]\n  12:   8b 45 0c                mov    eax,DWORD PTR [ebp+0xc]\n  15:   01 c2                   add    edx,eax\n  17:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n  1a:   89 10                   mov    DWORD PTR [eax],edx\n  1c:   90                      nop\n  1d:   5d                      pop    ebp\n  1e:   c3                      ret\n\n0000001f <first_func>:\n  1f:   55                      push   ebp\n  20:   89 e5                   mov    ebp,esp\n  22:   53                      push   ebx\n  23:   83 ec 14                sub    esp,0x14\n  26:   e8 fc ff ff ff          call   27 <first_func+0x8>\n  2b:   05 01 00 00 00          add    eax,0x1\n  30:   c7 45 f4 03 00 00 00    mov    DWORD PTR [ebp-0xc],0x3\n  37:   83 ec 0c                sub    esp,0xc\n  3a:   8d 90 00 00 00 00       lea    edx,[eax+0x0]\n  40:   52                      push   edx\n  41:   89 c3                   mov    ebx,eax\n  43:   e8 fc ff ff ff          call   44 <first_func+0x25>\n  48:   83 c4 10                add    esp,0x10\n  4b:   83 ec 08                sub    esp,0x8\n  4e:   ff 75 f4                push   DWORD PTR [ebp-0xc]\n  51:   8d 45 08                lea    eax,[ebp+0x8]\n  54:   50                      push   eax\n  55:   e8 a6 ff ff ff          call   0 <second_func>\n  5a:   83 c4 10                add    esp,0x10\n  5d:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n  60:   8b 5d fc                mov    ebx,DWORD PTR [ebp-0x4]\n  63:   c9                      leave\n  64:   c3                      ret\n\n00000065 <main>:\n  65:   8d 4c 24 04             lea    ecx,[esp+0x4]\n  69:   83 e4 f0                and    esp,0xfffffff0\n  6c:   ff 71 fc                push   DWORD PTR [ecx-0x4]\n  6f:   55                      push   ebp\n  70:   89 e5                   mov    ebp,esp\n  72:   53                      push   ebx\n  73:   51                      push   ecx\n  74:   e8 fc ff ff ff          call   75 <main+0x10>\n  79:   81 c3 02 00 00 00       add    ebx,0x2\n  7f:   83 ec 0c                sub    esp,0xc\n  82:   6a 0f                   push   0xf\n  84:   e8 96 ff ff ff          call   1f <first_func>\n  89:   83 c4 10                add    esp,0x10\n  8c:   83 ec 08                sub    esp,0x8\n  8f:   50                      push   eax\n  90:   8d 83 0e 00 00 00       lea    eax,[ebx+0xe]\n  96:   50                      push   eax\n  97:   e8 fc ff ff ff          call   98 <main+0x33>\n  9c:   83 c4 10                add    esp,0x10\n  9f:   b8 00 00 00 00          mov    eax,0x0\n  a4:   8d 65 f8                lea    esp,[ebp-0x8]\n  a7:   59                      pop    ecx\n  a8:   5b                      pop    ebx\n  a9:   5d                      pop    ebp\n  aa:   8d 61 fc                lea    esp,[ecx-0x4]\n  ad:   c3                      ret\n")),(0,o.yg)("p",null,"There are many other utilities that allow disassembly of object modules, most of them with a graphical interface and offering debugging support. ",(0,o.yg)("inlineCode",{parentName:"p"},"objdump")," is a simple utility that can be quickly used from the command line."),(0,o.yg)("p",null,"It's interesting to observe, both in the ",(0,o.yg)("inlineCode",{parentName:"p"},"test.asm")," file and in its disassembly, the way a function call is made, which we'll discuss further."))}u.isMDXComponent=!0}}]);