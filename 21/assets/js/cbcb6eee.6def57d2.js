"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[6858],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||y[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2241:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(8168),a=(n(6540),n(5680));const o={},i="Bonus: Rot13",s={unversionedId:"Lab 9 - Functions/Functions/Drills/Tasks/Rot13/README",id:"Lab 9 - Functions/Functions/Drills/Tasks/Rot13/README",title:"Bonus: Rot13",description:"Create and use a function that performs rot13 translation of a string.",source:"@site/docs/Lab 9 - Functions/Functions/Drills/Tasks/Rot13/README.md",sourceDirName:"Lab 9 - Functions/Functions/Drills/Tasks/Rot13",slug:"/Lab 9 - Functions/Functions/Drills/Tasks/Rot13/",permalink:"/hardware-software-interface/21/Lab 9 - Functions/Functions/Drills/Tasks/Rot13/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Implementing the toupper Function",permalink:"/hardware-software-interface/21/Lab 9 - Functions/Functions/Drills/Tasks/To Upper/"}},l={},p=[{value:"Bonus: Rot13++",id:"bonus-rot13-1",level:2}],c={toc:p},u="wrapper";function y(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"bonus-rot13"},"Bonus: Rot13"),(0,a.yg)("p",null,"Create and use a function that performs ",(0,a.yg)("a",{parentName:"p",href:"https://rot13.com/"},"rot13")," translation of a string."),(0,a.yg)("h2",{id:"bonus-rot13-1"},"Bonus: Rot13++"),(0,a.yg)("p",null,"Implement ",(0,a.yg)("inlineCode",{parentName:"p"},"rot13")," on an array of strings: the strings are contiguous in memory separated by the string terminator (",(0,a.yg)("inlineCode",{parentName:"p"},"NULL"),"-byte, ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),"). For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"ana\\0are\\0mere\\0")," is an array of three strings."),(0,a.yg)("p",null,"Apply ",(0,a.yg)("inlineCode",{parentName:"p"},"rot13")," to alphabetical characters and replace the string terminator with a space (",(0,a.yg)("inlineCode",{parentName:"p"},"' '"),", blank, character ",(0,a.yg)("inlineCode",{parentName:"p"},"32"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"0x20"),"). Thus, the initial string ",(0,a.yg)("inlineCode",{parentName:"p"},"ana\\0are\\0mere\\0")," will translate to ",(0,a.yg)("inlineCode",{parentName:"p"},"nan ner zrer"),"."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"NOTE:"),"  To define the array of strings containing the string terminator, use a construction like:"),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},'mystring db "ana", 0, "are", 0, "mere", 0\n'))),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"NOTE:"),"  You will need to know when to stop traversing the array of strings. The simplest way is to define a length variable in the ",(0,a.yg)("inlineCode",{parentName:"p"},".data")," section, like so:"),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},"len dd 10\n")),(0,a.yg)("p",{parentName:"blockquote"},"where you either store the total length of the string (from the beginning to the last ",(0,a.yg)("inlineCode",{parentName:"p"},"NULL")," byte) or the number of strings in the array.")))}y.isMDXComponent=!0}}]);