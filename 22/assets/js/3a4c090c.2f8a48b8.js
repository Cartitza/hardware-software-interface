"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[2166],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>f});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(i,".").concat(m)]||u[m]||l[m]||o;return t?r.createElement(f,s(s({ref:n},d),{},{components:t})):r.createElement(f,s({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[u]="string"==typeof e?e:a,s[1]=p;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7152:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=t(8168),a=(t(6540),t(5680));const o={},s="Stack operations",p={unversionedId:"Lab 8 - The Stack/Introduction/Guides/Stack Operations/README",id:"Lab 8 - The Stack/Introduction/Guides/Stack Operations/README",title:"Stack operations",description:"The stack_operations.asm file demonstrates various stack operations.",source:"@site/docs/Lab 8 - The Stack/Introduction/Guides/Stack Operations/README.md",sourceDirName:"Lab 8 - The Stack/Introduction/Guides/Stack Operations",slug:"/Lab 8 - The Stack/Introduction/Guides/Stack Operations/",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Guides/Stack Operations/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Guides",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Guides/"},next:{title:"Stack addressing",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Guides/Stack Addressing/"}},i={},c=[],d={toc:c},u="wrapper";function l(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"stack-operations"},"Stack operations"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"stack_operations.asm"),' file demonstrates various stack operations.\nThe main focus is to show how to manipulate the stack by pushing and popping values, and how to "allocate" and "deallocate" memory on the stack.'),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"Note:")," Notice how ",(0,a.yg)("inlineCode",{parentName:"p"},"push")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"pop")," are just syntactic sugar for the simpler ",(0,a.yg)("inlineCode",{parentName:"p"},"sub"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"add"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"mov")," instructions.")),(0,a.yg)("p",null,"For covenince, here's the contents of the file.\nTo play around with it, download the lab locally."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-assembly"},'%include "printf32.asm"\n\nsection .data\n    var: dd ?\n\nsection .text\n\n; esp -> stack pointer\n; ebp -> base pointer\n\nextern printf\nglobal main\nmain:\n    push ebp\n    mov ebp, esp\n\n    push dword 10 ; sub esp, 4;  mov [esp], 10;\n    push dword 11 ; sub esp, 4;  mov [esp], 11;\n    push dword 12 ; sub esp, 4;  mov [esp], 12;\n    push dword 13 ; sub esp, 4;  mov [esp], 13;\n    push dword 14 ; sub esp, 4;  mov [esp], 13;\n\n\n    pusha  ; push all registers on the stack\n    popa  ; pop all registers from the stack\n\n    ; Version 1\n    pop eax; ; mov eax, [esp]; add esp, 4\n    pop eax; ; mov eax, [esp]; add esp, 4\n    pop eax; ; mov eax, [esp]; add esp, 4\n    pop eax; ; mov eax, [esp]; add esp, 4\n    pop eax; ; mov eax, [esp]; add esp, 4\n\n    ; Version 2\n    ; add esp, 20 ; 4 * number_of_push\n\n    ; Version 3\n    ; mov esp, ebp\n\n    ; sub esp <-> add esp -> use to allocate/deallocate memory\n\n    ; Aloc 8 bytes <-> 2 int\n    ; sub esp, 8\n    ; mov [esp], 10\n    ; mov [esp + 4], 12\n\n    ; Push/Pop from global variable\n    \n    mov dword [var], 1337\n\n    push dword [var]\n    pop dword [var]\n\n    mov eax, [var]\n    PRINTF32 `VAR: %d\\n\\x0`, eax\n\n\n    leave\n    ret\n')))}l.isMDXComponent=!0}}]);