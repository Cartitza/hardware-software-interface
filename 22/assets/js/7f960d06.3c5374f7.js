"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[9367],{5680:(e,t,r)=>{r.d(t,{xA:()=>f,yg:()=>y});var a=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},f=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),p=l(r),d=n,y=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return r?a.createElement(y,s(s({ref:t},f),{},{components:r})):a.createElement(y,s({ref:t},f))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9988:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(8168),n=(r(6540),r(5680));const o={},s="3. Stack Adressing",i={unversionedId:"Lab 8 - The Stack/Introduction/Drills/Tasks/Stack Addressing/README",id:"Lab 8 - The Stack/Introduction/Drills/Tasks/Stack Addressing/README",title:"3. Stack Adressing",description:"The stack-addressing.asm program in the lab's archive allocates and initializes two local variables on the stack:",source:"@site/docs/Lab 8 - The Stack/Introduction/Drills/Tasks/Stack Addressing/README.md",sourceDirName:"Lab 8 - The Stack/Introduction/Drills/Tasks/Stack Addressing",slug:"/Lab 8 - The Stack/Introduction/Drills/Tasks/Stack Addressing/",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Drills/Tasks/Stack Addressing/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"2. Reverse Array",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Drills/Tasks/Reverse Array/"},next:{title:"4. Local Var",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Drills/Tasks/Local Var/"}},c={},l=[],f={toc:l},p="wrapper";function u(e){let{components:t,...r}=e;return(0,n.yg)(p,(0,a.A)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"3-stack-adressing"},"3. Stack Adressing"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"stack-addressing.asm")," program in the lab's archive allocates and initializes two local variables on the stack:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"an array of natural numbers from 1 to ",(0,n.yg)("inlineCode",{parentName:"li"},"NUM")),(0,n.yg)("li",{parentName:"ul"},"a string \u201cAna are mere\u201d.")),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Replace each ",(0,n.yg)("inlineCode",{parentName:"li"},"push")," instruction with an equivalent sequence of instructions."),(0,n.yg)("li",{parentName:"ol"},"Print the addresses and values on the stack in the interval ",(0,n.yg)("strong",{parentName:"li"},"[ESP, EBP]")," (from low addresses to high addresses) byte by byte."),(0,n.yg)("li",{parentName:"ol"},"Print the string allocated on the stack byte by byte and explain how it looks in memory. Think about where you should start displaying and when you should stop."),(0,n.yg)("li",{parentName:"ol"},"Print the vector allocated on the stack element by element. Think about where you should start displaying and what size each element has.")),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("strong",{parentName:"p"},"NOTE:")," After a successful implementation, the program should display something similar to the following output (it won't be exactly the same, stack memory addresses may differ):"),(0,n.yg)("pre",{parentName:"blockquote"},(0,n.yg)("code",{parentName:"pre"},"0xffcf071b: 65\n0xffcf071c: 110\n0xffcf071d: 97\n0xffcf071e: 32\n0xffcf071f: 97\n...\n0xffcf0734: 4\n0xffcf0735: 0\n0xffcf0736: 0\n0xffcf0737: 0\n0xffcf0738: 5\n0xffcf0739: 0\n0xffcf073a: 0\n0xffcf073b: 0\nAna are mere\n1 2 3 4 5\n")),(0,n.yg)("p",{parentName:"blockquote"},"Explain the significance of each byte. Why are they arranged in that particular order? Why are some bytes 0?")),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},(0,n.yg)("strong",{parentName:"p"},"TIP:")," Remember that ASCII character codes are represented as decimal values.\nRemember the order in which the bytes of a larger number are stored: review the section ",(0,n.yg)("strong",{parentName:"p"},"Order of representation of numbers larger than one byte")," from Lab 01.")))}u.isMDXComponent=!0}}]);