"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[5814],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>f});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,f=u["".concat(c,".").concat(d)]||u[d]||y[d]||o;return t?n.createElement(f,i(i({ref:r},p),{},{components:t})):n.createElement(f,i({ref:r},p))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9285:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=t(8168),a=(t(6540),t(5680));const o={},i="2. Reverse Array",s={unversionedId:"Lab 8 - The Stack/Introduction/Drills/Tasks/Reverse Array/README",id:"Lab 8 - The Stack/Introduction/Drills/Tasks/Reverse Array/README",title:"2. Reverse Array",description:"Building on the reverse-array.asm exercise, implement the TODOs without using the mov instruction when working with arrays, so that at the end of the program, the output array contains the input array in reverse order.",source:"@site/docs/Lab 8 - The Stack/Introduction/Drills/Tasks/Reverse Array/README.md",sourceDirName:"Lab 8 - The Stack/Introduction/Drills/Tasks/Reverse Array",slug:"/Lab 8 - The Stack/Introduction/Drills/Tasks/Reverse Array/",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Drills/Tasks/Reverse Array/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"1. Max",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Drills/Tasks/Max/"},next:{title:"3. Stack Adressing",permalink:"/hardware-software-interface/22/Lab 8 - The Stack/Introduction/Drills/Tasks/Stack Addressing/"}},c={},l=[],p={toc:l},u="wrapper";function y(e){let{components:r,...t}=e;return(0,a.yg)(u,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"2-reverse-array"},"2. Reverse Array"),(0,a.yg)("p",null,"Building on the ",(0,a.yg)("inlineCode",{parentName:"p"},"reverse-array.asm")," exercise, implement the ",(0,a.yg)("inlineCode",{parentName:"p"},"TODO"),"s without using the ",(0,a.yg)("inlineCode",{parentName:"p"},"mov")," instruction when working with arrays, so that at the end of the program, the ",(0,a.yg)("inlineCode",{parentName:"p"},"output")," array contains the ",(0,a.yg)("inlineCode",{parentName:"p"},"input")," array in reverse order."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"NOTE:")," After a correct solution, the program should print:"),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre"},"   Reversed array:\n   911\n   845\n   263\n   242\n   199\n   184\n   122\n"))))}y.isMDXComponent=!0}}]);