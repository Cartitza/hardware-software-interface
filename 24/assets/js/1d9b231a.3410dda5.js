"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[2786],{5680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>y});var t=r(6540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),u=a,y=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return r?t.createElement(y,o(o({ref:n},c),{},{components:r})):t.createElement(y,o({ref:n},c))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5008:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=r(8168),a=(r(6540),r(5680));const i={},o="Linking C and C++",s={unversionedId:"Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Cpp Obs/README",id:"Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Cpp Obs/README",title:"Linking C and C++",description:"We want to see how linking is done from mixed sources: C and C++.",source:"@site/docs/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Cpp Obs/README.md",sourceDirName:"Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Cpp Obs",slug:"/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Cpp Obs/",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Cpp Obs/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Tasks",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/"},next:{title:"Repair export problems",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Export Fix/"}},l={},p=[],c={toc:p},m="wrapper";function d(e){let{components:n,...r}=e;return(0,a.yg)(m,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"linking-c-and-c"},"Linking C and C++"),(0,a.yg)("p",null,"We want to see how linking is done from mixed sources: C and C++."),(0,a.yg)("p",null,"In the subdirectory ",(0,a.yg)("inlineCode",{parentName:"p"},"errors/")," we have two directories ",(0,a.yg)("inlineCode",{parentName:"p"},"c-calls-cpp/")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"cpp-calls-c/")," in which we combine mixed C and C++ sources.\nIn both cases, using ",(0,a.yg)("inlineCode",{parentName:"p"},"make")," displays errors.\nThis is because C++ symbols are ",(0,a.yg)("em",{parentName:"p"},"mangled"),", i.e. their symbols have different names because of the classes and namespaces present in C++.\nIf we use the ",(0,a.yg)("inlineCode",{parentName:"p"},"nm")," command on object modules obtained from C source code, we get:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-asm"},"$ nm add.o\n0000000000000000 T _Z3addii\n\n$ nm sub.o\n0000000000000000 T _Z3subi\n")),(0,a.yg)("p",null,"The symbol names are not ",(0,a.yg)("inlineCode",{parentName:"p"},"add")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"sub"),", respectively, but are ",(0,a.yg)("inlineCode",{parentName:"p"},"_Z3addii")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"_Z3subii"),".\nC++ symbol names are ",(0,a.yg)("em",{parentName:"p"},"mangled")," and define the function signature.\nThis is to allow functions with the same name but different signatures.\nDetails about ",(0,a.yg)("em",{parentName:"p"},"name mangling")," can be found ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Name_mangling"},"here"),"."),(0,a.yg)("p",null,"To fix this, you need to prefix symbols defined in C and imported into C++, or vice versa, with the ",(0,a.yg)("inlineCode",{parentName:"p"},'external "C"')," directive.\nThis way, the C++ compiler will use simple names for imported/exported symbols, to be used in conjunction with C modules.\nThis is done in the ",(0,a.yg)("inlineCode",{parentName:"p"},"correct/")," subdirectory.\nIn this subdirectory errors in the ",(0,a.yg)("inlineCode",{parentName:"p"},"errors/")," subdirectory are fixed.\nCompare the ",(0,a.yg)("inlineCode",{parentName:"p"},"ops.h"),' files in both subdirectories.\nDetails about the `external "C" directive can be found ',(0,a.yg)("a",{parentName:"p",href:"https://stackoverflow.com/a/1041880/4804196"},"here"),"."))}d.isMDXComponent=!0}}]);