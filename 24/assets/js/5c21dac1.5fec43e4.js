"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[7861],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(g,o(o({ref:t},d),{},{components:n})):r.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},608:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(8168),a=(n(6540),n(5680));const i={},o="C - Assembly Interaction",s={unversionedId:"Lab 10 - C - Assembly Interaction/Compatibility Issues/Reading/README",id:"Lab 10 - C - Assembly Interaction/Compatibility Issues/Reading/README",title:"C - Assembly Interaction",description:"Considering that assembly language poses challenges both in reading and in developing code, the general trend is to migrate towards high-level languages (which are much easier to read and provide a more user-friendly API).",source:"@site/docs/Lab 10 - C - Assembly Interaction/Compatibility Issues/Reading/README.md",sourceDirName:"Lab 10 - C - Assembly Interaction/Compatibility Issues/Reading",slug:"/Lab 10 - C - Assembly Interaction/Compatibility Issues/Reading/",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Compatibility Issues/Reading/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Compatibility Issues",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Compatibility Issues/"},next:{title:"Drills",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Compatibility Issues/Drills/"}},l={},c=[{value:"Using Assembly Procedures in C Functions",id:"using-assembly-procedures-in-c-functions",level:2},{value:"Declaration of the Procedure",id:"declaration-of-the-procedure",level:3},{value:"Calling C Functions from Assembly Procedures",id:"calling-c-functions-from-assembly-procedures",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"c---assembly-interaction"},"C - Assembly Interaction"),(0,a.yg)("p",null,"Considering that assembly language poses challenges both in reading and in developing code, the general trend is to migrate towards high-level languages (which are much easier to read and provide a more user-friendly API).\nHowever, there are still situations where, for optimization reasons, small assembly routines are used and integrated into the high-level language module."),(0,a.yg)("p",null,"In this laboratory, we will explore how assembly modules can be integrated into C programs and vice versa."),(0,a.yg)("h2",{id:"using-assembly-procedures-in-c-functions"},"Using Assembly Procedures in C Functions"),(0,a.yg)("p",null,"Using assembly procedures in C functions for a C program to be executed, it must be translated into the machine code of the processor; this is the task of a compiler.\nSince this compiled code is not always optimal, in some cases it is preferable to replace portions of code written in C with portions of assembly code that do the same thing, but with better performance."),(0,a.yg)("h3",{id:"declaration-of-the-procedure"},"Declaration of the Procedure"),(0,a.yg)("p",null,"In order to ensure that the assembly procedure and Module C are properly combined and compatible, the following steps must be followed:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"declare the procedure label as global, using the GLOBAL directive. In addition to this, any data that will be used by the procedure must be declared as global."),(0,a.yg)("li",{parentName:"ul"},"using the EXTERN directive to declare procedures and global data as external.")),(0,a.yg)("h2",{id:"calling-c-functions-from-assembly-procedures"},"Calling C Functions from Assembly Procedures"),(0,a.yg)("p",null,"In most cases, calling routines or functions from the standard C library in an assembly language program is a much more complex operation than vice versa.\nTake the example of calling the ",(0,a.yg)("inlineCode",{parentName:"p"},"printf()")," function from an assembly language program:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Assembly"},'global main\n\nexternal printf\n\nsection .data\n\ntext db "291 is the best!", 10, 0\nstrformat db "%s", 0\n\nsection .code\n\nmain\n        push dword text\n        push dword strformat\n        call printf\n        add esp, 8\n        ret\n')),(0,a.yg)("p",null,"Note that the procedure is declared as global and is called ",(0,a.yg)("inlineCode",{parentName:"p"},"main")," - the starting point of any C program. Since in C the parameters are stacked in reverse order, the string offset is set first, followed by the format string offset. The C function can be called afterwards, but the stack must be restored when the function exits."),(0,a.yg)("p",null,"When linking assembly code the standard C library (or the library containing the functions you use) must be included."))}p.isMDXComponent=!0}}]);