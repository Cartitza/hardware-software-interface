"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[6777],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>f});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(l,".").concat(m)]||u[m]||y[m]||o;return t?n.createElement(f,i(i({ref:r},p),{},{components:t})):n.createElement(f,i({ref:r},p))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7817:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(8168),a=(t(6540),t(5680));const o={},i="Keeping records",s={unversionedId:"Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Registers Preserve/README",id:"Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Registers Preserve/README",title:"Keeping records",description:"In this subdirectory of the lab's task repository you will find the printreversearray() function implemented by a simple loop that makes repeated calls of the printf() function.",source:"@site/docs/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Registers Preserve/README.md",sourceDirName:"Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Registers Preserve",slug:"/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Registers Preserve/",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Registers Preserve/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Warning (no error)",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Memory layout/Drills/Tasks/Include Fix/"},next:{title:"Stack",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Stack/"}},l={},c=[],p={toc:c},u="wrapper";function y(e){let{components:r,...t}=e;return(0,a.yg)(u,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"keeping-records"},"Keeping records"),(0,a.yg)("p",null,"In this subdirectory of the lab's task repository you will find the ",(0,a.yg)("inlineCode",{parentName:"p"},"print_reverse_array()")," function implemented by a simple loop that makes repeated calls of the ",(0,a.yg)("inlineCode",{parentName:"p"},"printf()")," function."),(0,a.yg)("p",null,"Follow the code in the ",(0,a.yg)("inlineCode",{parentName:"p"},"main.asm")," file, compile and run the program. What happened?\nThe program runs indefinitely. This is because the ",(0,a.yg)("inlineCode",{parentName:"p"},"printf()")," function does not preserve the value in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ECX")," register, used here as a counter."),(0,a.yg)("p",null,"Uncomment the lines marked ",(0,a.yg)("inlineCode",{parentName:"p"},"TODO1")," and rerun the program."),(0,a.yg)("h1",{id:"troubleshooting-segfault"},"Troubleshooting SEGFAULT"),(0,a.yg)("p",null,"Decompose the lines marked ",(0,a.yg)("inlineCode",{parentName:"p"},"TODO2")," in the assembly file from the previous exercise.\nThe code sequence makes a call to the ",(0,a.yg)("inlineCode",{parentName:"p"},"double_array()")," function, implemented in C, just before displaying the vector using the function seen earlier."),(0,a.yg)("p",null,"Compile and run the program. To debug the segfault you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"objdump")," utility to trace the assembly language code corresponding to the ",(0,a.yg)("inlineCode",{parentName:"p"},"double_array()")," function.\nNotice which of the registers used before and after the call are modified by this function."),(0,a.yg)("p",null,"Add the instructions for preserving and restoring the required registers to the assembly file."))}y.isMDXComponent=!0}}]);