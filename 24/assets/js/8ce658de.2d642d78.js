"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[1991],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),g=a,y=m["".concat(l,".").concat(g)]||m[g]||u[g]||i;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(8168),a=(n(6540),n(5680));const i={},o="Maximum Computation in Assembly with 64-bit C Call",s={unversionedId:"Lab 10 - C - Assembly Interaction/Stack Handling/Drills/Tasks/Max C Calls x64/README",id:"Lab 10 - C - Assembly Interaction/Stack Handling/Drills/Tasks/Max C Calls x64/README",title:"Maximum Computation in Assembly with 64-bit C Call",description:"Navigate to drills/tasks/max-c-calls-x64/support and open main.c",source:"@site/docs/Lab 10 - C - Assembly Interaction/Stack Handling/Drills/Tasks/Max C Calls x64/README.md",sourceDirName:"Lab 10 - C - Assembly Interaction/Stack Handling/Drills/Tasks/Max C Calls x64",slug:"/Lab 10 - C - Assembly Interaction/Stack Handling/Drills/Tasks/Max C Calls x64/",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Stack Handling/Drills/Tasks/Max C Calls x64/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Maximum Calculation in C with Call from Assembly",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Stack Handling/Drills/Tasks/Max Assembly Calls/"},next:{title:"Corrupt Stack Frame Debugging",permalink:"/hardware-software-interface/24/Lab 10 - C - Assembly Interaction/Stack Handling/Drills/Tasks/Stack Frame/"}},l={},c=[],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"maximum-computation-in-assembly-with-64-bit-c-call"},"Maximum Computation in Assembly with 64-bit C Call"),(0,a.yg)("p",null,"Navigate to ",(0,a.yg)("inlineCode",{parentName:"p"},"drills/tasks/max-c-calls-x64/support")," and open ",(0,a.yg)("inlineCode",{parentName:"p"},"main.c")),(0,a.yg)("p",null,"In this subdirectory you should have implemented the maximum assembly language calculation on a 64-bit system.\nStart the program from exercises 4 and 5 in such a way that you run it using a 64-bit system."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"TIP:"),"\n",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/X86_calling_conventions"},"https://en.wikipedia.org/wiki/X86_calling_conventions"),"."),(0,a.yg)("p",{parentName:"blockquote"},"The first thing to note is that on the x64 architecture the registers are 8 bytes in size and have different names than the 32-bit ones (in addition to extending the traditional ones: ",(0,a.yg)("inlineCode",{parentName:"p"},"eax")," register becomes ",(0,a.yg)("inlineCode",{parentName:"p"},"rax"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ebx")," register becomes ",(0,a.yg)("inlineCode",{parentName:"p"},"rbx"),", etc., there are new ones: R10-R15: for more information see ",(0,a.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/20637569/assembly-registers-in-64-bit-architecture"},"here"),")."),(0,a.yg)("p",{parentName:"blockquote"},"Also, on x64 architecture parameters are no longer sent to the stack, but put in registers.\nThe first 3 parameters are put in: ",(0,a.yg)("inlineCode",{parentName:"p"},"rdi"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"rsi")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"rdx")," registers.\nThis is not a uniformly adopted convention.\nThis convention is only valid on Linux, on Windows there are other registers which are used to pass the parameters of a function.\nThe calling convention requires that, for functions with a variable number of arguments, ",(0,a.yg)("inlineCode",{parentName:"p"},"rax")," register be set to the number of vector registers used to pass arguments.\n",(0,a.yg)("inlineCode",{parentName:"p"},"printf()")," is a variable argument count function, and unless you use registers other than those mentioned in the previous paragraph for passing arguments, you must set ",(0,a.yg)("inlineCode",{parentName:"p"},"rax = 0")," before calling.\nRead more ",(0,a.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/38335212/calling-printf-in-x86-64-using-gnu-assembler"},"here"),".")))}u.isMDXComponent=!0}}]);