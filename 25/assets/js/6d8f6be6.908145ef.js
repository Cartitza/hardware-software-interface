"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[5798],{5680:(e,t,r)=>{r.d(t,{xA:()=>d,yg:()=>h});var n=r(6540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(r),f=o,h=u["".concat(l,".").concat(f)]||u[f]||c[f]||a;return r?n.createElement(h,i(i({ref:t},d),{},{components:r})):n.createElement(h,i({ref:t},d))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4411:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(8168),o=(r(6540),r(5680));const a={},i="Solution",s={unversionedId:"Lab 12 - Capture The Flag/CTF/Drills/Tasks/Bonus - ROP/solution/README",id:"Lab 12 - Capture The Flag/CTF/Drills/Tasks/Bonus - ROP/solution/README",title:"Solution",description:'Idea: The function that needs to be called is specialfunction() with arguments 6 and 9. The binary is a 64-bits ELF, therefore the parameters are no longer taken from the stack; they are taken from registers esi and edi; in order to set these registers you need to execute 2 gadgets. By using commands like ropsearch "pop rsi" and ropsearch "pop rdi" in GDB peda, you will find gadgets pop rsi; pop r15; ret and pop rdi; ret. We first need to overwrite the return address with the address of the first gadget, followed by 2 8-bytes values (rsi and r15, which is not relevant); the value of rsi needs to be the value of the second argument; these values are followed by the address of the second gadget and the value of rdi - the first argument of the function. Finally, we jump to the address of specialfunction().',source:"@site/docs/Lab 12 - Capture The Flag/CTF/Drills/Tasks/Bonus - ROP/solution/README.md",sourceDirName:"Lab 12 - Capture The Flag/CTF/Drills/Tasks/Bonus - ROP/solution",slug:"/Lab 12 - Capture The Flag/CTF/Drills/Tasks/Bonus - ROP/solution/",permalink:"/hardware-software-interface/25/Lab 12 - Capture The Flag/CTF/Drills/Tasks/Bonus - ROP/solution/",draft:!1,tags:[],version:"current",frontMatter:{}},l={},p=[],d={toc:p},u="wrapper";function c(e){let{components:t,...r}=e;return(0,o.yg)(u,(0,n.A)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"solution"},"Solution"),(0,o.yg)("p",null,"Idea: The function that needs to be called is ",(0,o.yg)("inlineCode",{parentName:"p"},"special_function()")," with arguments 6 and 9. The binary is a 64-bits ELF, therefore the parameters are no longer taken from the stack; they are taken from registers esi and edi; in order to set these registers you need to execute 2 gadgets. By using commands like ",(0,o.yg)("inlineCode",{parentName:"p"},'ropsearch "pop rsi"')," and ",(0,o.yg)("inlineCode",{parentName:"p"},'ropsearch "pop rdi"')," in ",(0,o.yg)("inlineCode",{parentName:"p"},"GDB peda"),", you will find gadgets ",(0,o.yg)("inlineCode",{parentName:"p"},"pop rsi; pop r15; ret")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"pop rdi; ret"),". We first need to overwrite the return address with the address of the first gadget, followed by 2 8-bytes values (rsi and r15, which is not relevant); the value of rsi needs to be the value of the second argument; these values are followed by the address of the second gadget and the value of rdi - the first argument of the function. Finally, we jump to the address of ",(0,o.yg)("inlineCode",{parentName:"p"},"special_function()"),"."),(0,o.yg)("p",null,"The command below might need to be modified."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},'python3 -c \'import sys; sys.stdout.buffer.write(b"A"*24 + b"\\x61\\x08\\x40\\x00\\x00\\x00\\x00\\x00" + b"\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00" + b"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00" + b"\\x63\\x08\\x40\\x00\\x00\\x00\\x00\\x00" + b"\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00" + b"\\x98\\x07\\x40\\x00\\x00\\x00\\x00\\x00")\' | ./rop')))}c.isMDXComponent=!0}}]);