"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[8294],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7858:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(8168),r=(t(6540),t(5680));const i={},o="Solution",l={unversionedId:"Lab 12 - Capture The Flag/CTF/Drills/Tasks/Hidden in Plain Sight ++/solution/README",id:"Lab 12 - Capture The Flag/CTF/Drills/Tasks/Hidden in Plain Sight ++/solution/README",title:"Solution",description:"In a nature similar to that of the previous exercise, we take a close look at the objdump disassembly output of the binary using the objdump -D -M intel link2 command, specifically focusing on the helper() function:",source:"@site/docs/Lab 12 - Capture The Flag/CTF/Drills/Tasks/Hidden in Plain Sight ++/solution/README.md",sourceDirName:"Lab 12 - Capture The Flag/CTF/Drills/Tasks/Hidden in Plain Sight ++/solution",slug:"/Lab 12 - Capture The Flag/CTF/Drills/Tasks/Hidden in Plain Sight ++/solution/",permalink:"/hardware-software-interface/25/Lab 12 - Capture The Flag/CTF/Drills/Tasks/Hidden in Plain Sight ++/solution/",draft:!1,tags:[],version:"current",frontMatter:{}},p={},s=[],c={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"solution"},"Solution"),(0,r.yg)("p",null,"In a nature similar to that of the previous exercise, we take a close look at the ",(0,r.yg)("inlineCode",{parentName:"p"},"objdump")," disassembly output of the binary using the ",(0,r.yg)("inlineCode",{parentName:"p"},"objdump -D -M intel link2")," command, specifically focusing on the ",(0,r.yg)("inlineCode",{parentName:"p"},"helper()")," function:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-asm"},"0000012b <helper>:\n(...)\n137: 83 7d 08 2a                   cmp     dword ptr [ebp + 8], 42\n13b: 75 0d                         jne     0x14a <helper+0x1f>\n13d: 80 7d f4 58                   cmp     byte ptr [ebp - 12], 88\n141: 75 07                         jne     0x14a <helper+0x1f>\n143: e8 b8 fe ff ff                call    0x0 <get_flag>\n")),(0,r.yg)("p",null,"The first ",(0,r.yg)("inlineCode",{parentName:"p"},"cmp")," instruction at ",(0,r.yg)("inlineCode",{parentName:"p"},"0x137")," compares the value at ",(0,r.yg)("inlineCode",{parentName:"p"},"[ebp + 8]")," with ",(0,r.yg)("inlineCode",{parentName:"p"},"42"),".\nThis implies that the first argument passed to the helper() function is expected to be ",(0,r.yg)("inlineCode",{parentName:"p"},"42"),".\nThe second ",(0,r.yg)("inlineCode",{parentName:"p"},"cmp")," instruction at ",(0,r.yg)("inlineCode",{parentName:"p"},"0x13d")," compares the value at ",(0,r.yg)("inlineCode",{parentName:"p"},"[ebp - 12]")," with ",(0,r.yg)("inlineCode",{parentName:"p"},"88"),".\nSince it's comparing a single byte (",(0,r.yg)("inlineCode",{parentName:"p"},"byte ptr"),"), we can infer that this corresponds to a ",(0,r.yg)("inlineCode",{parentName:"p"},"char")," argument.\nAlthough it appears to be a local variable, if we look around a bit, we will notice why that is:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-asm"},"131: 8b 45 0c                      mov     eax, dword ptr [ebp + 12]\n134: 88 45 f4                      mov     byte ptr [ebp - 12], al\n")),(0,r.yg)("p",null,"The value at ",(0,r.yg)("inlineCode",{parentName:"p"},"[ebp + 12]")," is moved into the ",(0,r.yg)("inlineCode",{parentName:"p"},"eax")," register - this corresponds to the second argument passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"helper")," function.\nThe lower byte of ",(0,r.yg)("inlineCode",{parentName:"p"},"eax"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"al"),", the ",(0,r.yg)("inlineCode",{parentName:"p"},"char")," that we are interested in, is then moved into a local variable."),(0,r.yg)("p",null,"If both of the aforementioned comparisons are successful, the ",(0,r.yg)("inlineCode",{parentName:"p"},"get_flag()")," function is called.\nHence, we can infer that we need to call the ",(0,r.yg)("inlineCode",{parentName:"p"},"helper()")," function using the two arguments above - the integer ",(0,r.yg)("inlineCode",{parentName:"p"},"44"),", and the char ",(0,r.yg)("inlineCode",{parentName:"p"},"X"),", which is ",(0,r.yg)("inlineCode",{parentName:"p"},"88")," in decimal."))}d.isMDXComponent=!0}}]);