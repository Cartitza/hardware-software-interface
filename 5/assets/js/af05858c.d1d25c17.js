"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[305],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),g=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=g(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=g(t),m=o,d=u["".concat(s,".").concat(m)]||u[m]||c[m]||a;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var g=2;g<a;g++)i[g]=t[g];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9026:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>g});var r=t(8168),o=(t(6540),t(5680));const a={},i="GNU Debugger (GDB)",l={unversionedId:"Lab 2 - Memory Operations. Introduction to GDB/Introduction to GDB/Reading/README",id:"Lab 2 - Memory Operations. Introduction to GDB/Introduction to GDB/Reading/README",title:"GNU Debugger (GDB)",description:"Starting GDB",source:"@site/docs/Lab 2 - Memory Operations. Introduction to GDB/Introduction to GDB/Reading/README.md",sourceDirName:"Lab 2 - Memory Operations. Introduction to GDB/Introduction to GDB/Reading",slug:"/Lab 2 - Memory Operations. Introduction to GDB/Introduction to GDB/Reading/",permalink:"/hardware-software-interface/5/Lab 2 - Memory Operations. Introduction to GDB/Introduction to GDB/Reading/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Introduction to GDB",permalink:"/hardware-software-interface/5/Lab 2 - Memory Operations. Introduction to GDB/Introduction to GDB/"},next:{title:"Drills",permalink:"/hardware-software-interface/5/Lab 2 - Memory Operations. Introduction to GDB/Introduction to GDB/Drills/"}},s={},g=[{value:"<strong>Starting GDB</strong>",id:"starting-gdb",level:2},{value:"<strong>Running the Program</strong>",id:"running-the-program",level:2},{value:"<strong>Breakpoints</strong>",id:"breakpoints",level:2},{value:"<strong>Stepping through instructions</strong>",id:"stepping-through-instructions",level:2},{value:"<strong>Inspecting Memory</strong>",id:"inspecting-memory",level:2}],p={toc:g},u="wrapper";function c(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"gnu-debugger-gdb"},"GNU Debugger (GDB)"),(0,o.yg)("h2",{id:"starting-gdb"},(0,o.yg)("strong",{parentName:"h2"},"Starting GDB")),(0,o.yg)("p",null,"GDB is a powerful tool for debugging programs. It allows you to inspect the state of a program at a certain point in its execution, set breakpoints, and step through the code, among other things. To start GDB, you need to run the following command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"gdb [program_name]\n")),(0,o.yg)("h2",{id:"running-the-program"},(0,o.yg)("strong",{parentName:"h2"},"Running the Program")),(0,o.yg)("p",null,"To run the program being debugged, there are two available commands:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"r")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"run")," - this command will run the program"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"start")," - unlike ",(0,o.yg)("inlineCode",{parentName:"li"},"run"),", this command will start the program but immediately stop after entering ",(0,o.yg)("inlineCode",{parentName:"li"},"main"))),(0,o.yg)("h2",{id:"breakpoints"},(0,o.yg)("strong",{parentName:"h2"},"Breakpoints")),(0,o.yg)("p",null,"The essential element of GDB is the breakpoint. Essentially, setting a breakpoint at a certain instruction causes the program's execution to halt every time it reaches that point. Setting a breakpoint is done with the following command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-gdb"},"break [location]\n")),(0,o.yg)("p",null,"where ",(0,o.yg)("em",{parentName:"p"},"location")," can represent the name of a function, the line number of the code, or even a memory address, in which case the address must be preceded by the symbol *. For example: ",(0,o.yg)("strong",{parentName:"p"},"break ","*","0xCAFEBABE")),(0,o.yg)("h2",{id:"stepping-through-instructions"},(0,o.yg)("strong",{parentName:"h2"},"Stepping through instructions")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"si")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"stepi")," - executes the current instruction"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ni")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"nexti")," - similar to ",(0,o.yg)("inlineCode",{parentName:"li"},"stepi"),", but if the current instruction is a function call, the debugger will not enter the function"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"c")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"continue")," - continues program execution until the next breakpoint or until it finishes"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"finish")," - continues program execution until leaving the current function")),(0,o.yg)("h2",{id:"inspecting-memory"},(0,o.yg)("strong",{parentName:"h2"},"Inspecting Memory")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"p")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"print")," var - displays the value of ",(0,o.yg)("inlineCode",{parentName:"li"},"var"),". Print is a very flexible command, allowing dereferencing of pointers, displaying addresses of variables, and indexing through arrays using *, & and []. The print command can be followed by the /f parameter specifying the display format (x for hex, d for decimal, s for string)."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"x")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"examine")," - Inspects the content at the given address. The usage of this command is as follows:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"x/nfu address\n")),(0,o.yg)("p",null,"where:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"n is the number of displayed elements"),(0,o.yg)("li",{parentName:"ul"},"f is the display format (x for hex, d for decimal, s for string, and i for instructions)"),(0,o.yg)("li",{parentName:"ul"},"u is the size of each element (b for 1 byte, h for 2, w for 4, and g for 8 bytes)")),(0,o.yg)("p",null,"We recommend the article ",(0,o.yg)("a",{parentName:"p",href:"https://ocw.cs.pub.ro/courses/programare/tutoriale/debugging"},"Debugging")," for further understanding of how to use GDB both in the CLI and through an IDE."))}c.isMDXComponent=!0}}]);